<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapper.Common</name>
    </assembly>
    <members>
        <member name="T:Dapper.Common.ColumnAttribute">
            <summary>
            属性映射到字段
            </summary>
        </member>
        <member name="P:Dapper.Common.ColumnAttribute.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Dapper.Common.ColumnAttribute.IsPrimaryKey">
            <summary>
            是否为主键
            </summary>
        </member>
        <member name="P:Dapper.Common.ColumnAttribute.Remove">
            <summary>
            是否移除字段,如果表中不存在该列则设置为true
            </summary>
        </member>
        <member name="M:Dapper.Common.ColumnAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            字段映射
            </summary>
            <param name="name">字段名</param>
            <param name="isPrimarykey">是否为主键</param>
        </member>
        <member name="M:Dapper.Common.ColumnAttribute.#ctor(System.Boolean)">
            <summary>
            移除字段
            </summary>
            <param name="remove">是否移除</param>
        </member>
        <member name="T:Dapper.Common.FunctionAttribute">
            <summary>
            数据库函数:标识函数为数据库函数
            </summary>
        </member>
        <member name="T:Dapper.Common.KeyParameterAttribute">
            <summary>
            关键字参数：标识该参数为关键字
            </summary>
        </member>
        <member name="T:Dapper.Common.TableAttribute">
            <summary>
            类映射表
            </summary>
        </member>
        <member name="P:Dapper.Common.TableAttribute.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:Dapper.Common.TableAttribute.#ctor(System.String)">
            <summary>
            映射表名
            </summary>
            <param name="name">表名</param>
        </member>
        <member name="T:Dapper.Common.IFrom`1">
            <summary>
            SQL构建对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Select(System.String)">
            <summary>
            Select：返回列表
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Select``1(System.String)">
            <summary>
            Select:返回列表
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.SelectAsync(System.String)">
            <summary>
            SelectAsync:异步返回列表
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.SelectAsync``1(System.String)">
            <summary>
            SelectAsync:异步返一个新的类型
            不支持匿名类型
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Select：返回一个新的类型
            不支持匿名类型
            </summary>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.SelectAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            SelectAsync：返回一个新的类型
            不支持匿名类型
            </summary>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Single(System.String)">
            <summary>
            Single：返回单个实体
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Single``1(System.String)">
            <summary>
            Single
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.SingleAsync(System.String)">
            <summary>
            SingleAsync
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.SingleAsync``1(System.String)">
            <summary>
            SingleAsync
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Single``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Single
            </summary>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.SingleAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            SingleAsync
            </summary>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Count">
            <summary>
            Count：返回满足Where条件的记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Exists">
            <summary>
            Exists：判断满足Where条件的记录数是否存在
            </summary>
            <returns>个数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Insert(`0)">
            <summary>
            Insert：新增实体
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.InsertAsync(`0)">
            <summary>
            异步：新增实体
            </summary>
            <param name="entity">实体</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.InsertById(`0)">
            <summary>
            新增实体：返回自增列
            </summary>
            <param name="entity">实体</param>
            <returns>返回自增列</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.InsertByIdAsync(`0)">
            <summary>
            异步新增实体：返回自增列
            </summary>
            <param name="entity">实体</param>
            <returns>返回自增列</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量新增
            </summary>
            <param name="entitys">实体集合</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量新增
            </summary>
            <param name="entitys">实体集合</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Update">
            <summary>
            执行更新
            </summary>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.UpdateAsync">
            <summary>
            异步：执行更新
            </summary>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Update(`0)">
            <summary>
            根据主键更新实体
            </summary>
            <param name="entity"></param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.UpdateAsync(`0)">
            <summary>
            异步：根据主键更新实体
            </summary>
            <param name="entity"></param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量新增实体
            </summary>
            <param name="entitys">实体集合</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步：根据主键批量修改实体
            </summary>
            <param name="entitys">实体集合</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Delete">
            <summary>
            执行删除操作
            </summary>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.DeleteAsync">
            <summary>
            异步：执行删除操作
            </summary>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Distinct">
            <summary>
            去重
            </summary>
            <returns>影响行数</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Where(System.String)">
            <summary>
            过滤
            </summary>
            <param name="expression">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Where(Dapper.Common.WhereQuery{`0})">
             <summary>
            过滤
             </summary>
             <param name="whereQuery">动态表达式</param>
             <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            过滤
            </summary>
            <param name="whereQuery">动态表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件过滤
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Set(System.String,System.Object)">
            <summary>
            更新列
            </summary>
            <param name="column">列</param>
            <param name="value">值</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Set(System.Boolean,System.String,System.Object)">
            <summary>
            条件更新列
            </summary>
            <param name="condition">条件</param>
            <param name="column">列</param>
            <param name="value">值</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            更新列
            </summary>
            <param name="column">列</param>
            <param name="value">值</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Set(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            条件更新列
            </summary>
            <param name="condition">条件</param>
            <param name="column">列</param>
            <param name="value">值</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            更新列
            </summary>
            <param name="column">列</param>
            <param name="expression"></param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Set(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            条件更新列
            </summary>
            <param name="condition">条件</param>
            <param name="column">列</param>
            <param name="expression">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.GroupBy(System.String)">
            <summary>
            分组
            </summary>
            <param name="groupby">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            分组
            </summary>
            <param name="groupby">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Having(System.String)">
            <summary>
            分组之后筛选
            </summary>
            <param name="having">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Having(Dapper.Common.WhereQuery{`0})">
            <summary>
            分组之后筛选
            </summary>
            <param name="whereQuery">动态条件</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            分组之后筛选
            </summary>
            <param name="expression">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Desc(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            倒叙排序
            </summary>
            <param name="orderBy">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Desc(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            条件倒叙排序
            </summary>
            <param name="condition">条件</param>
            <param name="orderBy">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Asc(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            升序
            </summary>
            <param name="orderBy">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Asc(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            条件升序
            </summary>
            <param name="condition">条件</param>
            <param name="orderBy">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.OrderBy(System.String)">
            <summary>
            排序
            </summary>
            <param name="orderBy">表达式</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Skip(System.Int32,System.Int32)">
            <summary>
            从index开始返回count条记录
            </summary>
            <param name="index">起始位置</param>
            <param name="count">个数</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Skip(System.Int32)">
            <summary>
            从0开始返回count条记录
            </summary>
            <param name="count">个数</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.Skip(System.Int32,System.Int32,System.Int32@)">
            <summary>
            从index开始获取count条记录,并返回总个数
            </summary>
            <param name="index">起始位置</param>
            <param name="count">返回个数</param>
            <param name="total">总个数</param>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.XLock">
            <summary>
            悲观锁
            </summary>
            <returns>IFrom</returns>
        </member>
        <member name="M:Dapper.Common.IFrom`1.SLock">
            <summary>
            共享锁
            </summary>
            <returns>IFrom</returns>
        </member>
        <member name="T:Dapper.Common.ISession">
            <summary>
            事物回话接口
            </summary>
        </member>
        <member name="M:Dapper.Common.ISession.From``1">
            <summary>
            返回一个构建SQL的对象
            </summary>
            <typeparam name="TTable"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.Execute(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行SQL语句并返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.ExecuteAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步执行SQL语句并返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.ExecuteReader(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行查询返回IDataReader
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.ExecuteReaderAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步查询返回IDataReader
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.ExecuteScalar``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            查询单个对象并
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.ExecuteScalar(System.String,System.Object,System.Data.CommandType)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.ExecuteScalarAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步查询单个对象
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.ExecuteScalarAsync``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步查询单个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.Query``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行SQL语句并返回查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.Query(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行查询返回dynamic类型
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.QueryAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行异步查询返回dynamic类型
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.QueryAsync``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步执行SQL语句并返回查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.QueryMultiple(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行多SQL查询
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.QueryMultipleAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步执行多SQL查询
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.ISession.Open(System.Boolean)">
            <summary>
            开启回话
            </summary>
            <param name="autoCommit">是否自动提交</param>
        </member>
        <member name="M:Dapper.Common.ISession.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Dapper.Common.ISession.Rollback">
            <summary>
            回滚事物
            </summary>
        </member>
        <member name="M:Dapper.Common.ISession.Close">
            <summary>
            关闭事物
            </summary>
        </member>
        <member name="P:Dapper.Common.ISession.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:Dapper.Common.ISession.Buffered">
            <summary>
            查询缓存
            </summary>
        </member>
        <member name="M:Dapper.Common.ISession.Logger">
            <summary>
            回话日志
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapper.Common.SessionState">
            <summary>
            事物回话状态
            </summary>
        </member>
        <member name="F:Dapper.Common.SessionState.Closed">
            <summary>
            回话关闭
            </summary>
        </member>
        <member name="F:Dapper.Common.SessionState.Open">
            <summary>
            回话开启
            </summary>
        </member>
        <member name="F:Dapper.Common.SessionState.Commit">
            <summary>
            回话关闭
            </summary>
        </member>
        <member name="F:Dapper.Common.SessionState.Rollback">
            <summary>
            回话回滚
            </summary>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dapper.Common.MysqlFrom`1.Session">
            <summary>
            会话事物
            </summary>
        </member>
        <member name="F:Dapper.Common.MysqlFrom`1.Param">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="F:Dapper.Common.MysqlFrom`1.QuerySql">
            <summary>
            查询SQL
            </summary>
        </member>
        <member name="F:Dapper.Common.MysqlFrom`1.InsertSql">
            <summary>
            插入SQL
            </summary>
        </member>
        <member name="F:Dapper.Common.MysqlFrom`1.DeleteSql">
            <summary>
            删除SQL
            </summary>
        </member>
        <member name="F:Dapper.Common.MysqlFrom`1.UpdateSql">
            <summary>
            更新SQL
            </summary>
        </member>
        <member name="F:Dapper.Common.MysqlFrom`1.SkipSql">
            <summary>
            分页SQL
            </summary>
        </member>
        <member name="P:Dapper.Common.MysqlFrom`1.FromSql">
            <summary>
            表
            </summary>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.SelectBuild(System.String)">
            <summary>
            构建Select语句
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Select(System.String)">
            <summary>
            查询数据
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Select``1(System.String)">
            <summary>
            查询数据
            不支持匿名类型
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.SelectAsync(System.String)">
            <summary>
            异步查询
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.SelectAsync``1(System.String)">
            <summary>
            异步查询
            不支持匿名类型
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查询数据:指定字段列表
            不支持匿名类型
            </summary>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.SelectAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            异步查询,指定字段列表
            不支持匿名类型
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Single(System.String)">
            <summary>
            查询单个数据
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Single``1(System.String)">
            <summary>
            查询单个数据
            不支持匿名类型
            </summary>
            <param name="columns">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.SingleAsync``1(System.String)">
            <summary>
            异步查询单个数据
            不支持匿名类型
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.SingleAsync(System.String)">
            <summary>
            异步查询单个数据
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Single``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查询单个数据:指定查询列
            不支持匿名类型
            </summary>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.SingleAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            异步查询单个实体:指定查询列
            不支持匿名类型
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Count">
            <summary>
            返回满足Where条件的记录个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Exists">
            <summary>
            返回满足Where的记录是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Insert(`0)">
            <summary>
            插入实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.InsertAsync(`0)">
            <summary>
            异步插入实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.InsertById(`0)">
            <summary>
            插入实体,并返回identity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.InsertByIdAsync(`0)">
            <summary>
            异步插入实体,并返回identity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入实体
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步插入实体
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Update">
            <summary>
            执行SET更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.UpdateAsync">
            <summary>
            异步执行Set更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Update(`0)">
            <summary>
            更新指定实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.UpdateAsync(`0)">
            <summary>
            异步更新实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新实体
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量更新
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Delete">
            <summary>
            执行Delete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.DeleteAsync">
            <summary>
            异步执行Delete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Distinct">
            <summary>
            Distinct
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Skip(System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页查询
            从index开始,获取count条记录,并返回满足当前Where的记录数
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Where(System.String)">
            <summary>
            Where
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Where(System.Boolean,System.String)">
            <summary>
            条件Where
            </summary>
            <param name="condition"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Where(Dapper.Common.WhereQuery{`0})">
            <summary>
            Where
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Where
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Where
            </summary>
            <param name="condition"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.XLock">
            <summary>
            悲观锁：读锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.SLock">
            <summary>
            共享锁：写锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Set(System.String,System.Object)">
            <summary>
            Set
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Set(System.Boolean,System.String,System.Object)">
            <summary>
            条件Set
            </summary>
            <param name="condition"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Set
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Set(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            条件Set
            </summary>
            <param name="condition"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Set
            </summary>
            <param name="column">字段</param>
            <param name="value">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Set(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            条件Set
            </summary>
            <param name="condition">条件</param>
            <param name="column">字段</param>
            <param name="value">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.GroupBy(System.String)">
            <summary>
            GroupBy
            </summary>
            <param name="groupby"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <param name="groupby"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Having(System.String)">
            <summary>
            Having
            </summary>
            <param name="hiving"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Having(Dapper.Common.WhereQuery{`0})">
            <summary>
            分组筛选
            </summary>
            <param name="having"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            分组筛选
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Desc(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            降序排序
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Desc(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            条件降序
            </summary>
            <param name="condition"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Asc(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            升序排序
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Asc(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            条件升序
            </summary>
            <param name="condition"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.OrderBy(System.String)">
            <summary>
            OrderBy
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Skip(System.Int32,System.Int32)">
            <summary>
            从index,开始获取count条记录
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.MysqlFrom`1.Skip(System.Int32)">
            <summary>
            获取前count条记录
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Common.Session">
            <summary>
            事物会话基础对象
            </summary>
        </member>
        <member name="M:Dapper.Common.Session.#ctor(System.Data.IDbConnection,Dapper.Common.DataSourceType)">
            <summary>
            创建数会话
            </summary>
            <param name="connection"></param>
            <param name="dataSourceType"></param>
        </member>
        <member name="P:Dapper.Common.Session.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Dapper.Common.Session.Transaction">
            <summary>
            数据库事物
            </summary>
        </member>
        <member name="P:Dapper.Common.Session.State">
            <summary>
            会话状态
            </summary>
        </member>
        <member name="P:Dapper.Common.Session.DataSourceType">
            <summary>
            数据源类型
            </summary>
        </member>
        <member name="P:Dapper.Common.Session.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:Dapper.Common.Session.Buffered">
            <summary>
            查询缓存
            </summary>
        </member>
        <member name="M:Dapper.Common.Session.From``1">
            <summary>
            返回构建sql的对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.Execute(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行SQL语句并返会影响行数
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.ExecuteAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步执行SQL语句并返会影响行数
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.ExecuteScalar``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            查询单个数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.ExecuteScalar(System.String,System.Object,System.Data.CommandType)">
            <summary>
            查询单个数据
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.ExecuteScalarAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步查询单个数据
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.ExecuteScalarAsync``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步执行查询单个数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.Query``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行SQL语句并返会查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.QueryAsync``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步执行SQL语句并返会查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.Query(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.QueryAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步执行查询
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.QueryMultiple(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行多个SQL查询
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.QueryMultipleAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            异步执行多个SQL查询
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.ExecuteReader(System.String,System.Object,System.Data.CommandType)">
            <summary>
            ExecuteReader
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.ExecuteReaderAsync(System.String,System.Object,System.Data.CommandType)">
            <summary>
            ExecuteReaderAsync
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.Session.Open(System.Boolean)">
            <summary>
            开启会话
            </summary>
            <param name="autoCommit">是否自动提交</param>
        </member>
        <member name="M:Dapper.Common.Session.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Dapper.Common.Session.Rollback">
            <summary>
            会滚事物
            </summary>
        </member>
        <member name="M:Dapper.Common.Session.Close">
            <summary>
            关闭事物
            </summary>
        </member>
        <member name="M:Dapper.Common.Session.Logger">
            <summary>
            输出会话日志
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapper.Common.SessionFactory">
            <summary>
            会话工厂
            </summary>
        </member>
        <member name="F:Dapper.Common.SessionFactory.DataSources">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Dapper.Common.SessionFactory.StaticProxy">
            <summary>
            是否开启静态代理来记录日志和计时
            </summary>
        </member>
        <member name="M:Dapper.Common.SessionFactory.#cctor">
            <summary>
            直接设置Dapper下划线匹配
            </summary>
        </member>
        <member name="M:Dapper.Common.SessionFactory.GetSession(System.String)">
            <summary>
            获取会话
            </summary>
            <param name="name">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.SessionFactory.GetConnection(System.String)">
            <summary>
            获取数据库连接
            </summary>
            <param name="name">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.SessionFactory.GetDataSource(System.String)">
            <summary>
            获取数据源
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Common.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Dapper.Common.DataSource.Name">
            <summary>
            数据源名称
            </summary>
        </member>
        <member name="P:Dapper.Common.DataSource.Type">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Dapper.Common.DataSource.Source">
            <summary>
            数据源
            </summary>
        </member>
        <member name="T:Dapper.Common.DataSourceType">
            <summary>
            数据源类型
            </summary>
        </member>
        <member name="F:Dapper.Common.DataSourceType.MYSQL">
            <summary>
            Mysql数据库
            </summary>
        </member>
        <member name="T:Dapper.Common.SessionProxy">
            <summary>
            事物会话代理类
            </summary>
        </member>
        <member name="P:Dapper.Common.SessionProxy.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:Dapper.Common.SessionProxy.Loggers">
            <summary>
            会话日志
            </summary>
        </member>
        <member name="F:Dapper.Common.SessionProxy.Watch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="M:Dapper.Common.SessionProxy.#ctor(Dapper.Common.ISession)">
            <summary>
            构造器
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Dapper.Common.FunVisitor`1">
            <summary>
            数据库表达式构建
            </summary>
        </member>
        <member name="P:Dapper.Common.FunVisitor`1.Param">
            <summary>
            表达式参数
            </summary>
        </member>
        <member name="F:Dapper.Common.FunVisitor`1.FunExpression">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="P:Dapper.Common.FunVisitor`1.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:Dapper.Common.FunVisitor`1.KeyParameter">
            <summary>
            是否为关键字
            </summary>
        </member>
        <member name="P:Dapper.Common.FunVisitor`1.Operator">
            <summary>
            当前操作符
            </summary>
        </member>
        <member name="P:Dapper.Common.FunVisitor`1.IsConstant">
            <summary>
            是否是常量
            </summary>
        </member>
        <member name="M:Dapper.Common.FunVisitor`1.SetValue(System.Object)">
            <summary>
            构建表达式参数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Dapper.Common.FunVisitor`1.SetName(System.String)">
            <summary>
            构建表达式字段
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Dapper.Common.FunVisitor`1.Build(System.Collections.Generic.Dictionary{System.String,System.Object},System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            构建函数表达式,及参数
            </summary>
            <param name="param"></param>
            <param name="expression"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.FunVisitor`1.GetColumn(System.Linq.Expressions.Expression)">
            <summary>
            获取字段名
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="F:Dapper.Common.TypeMapper.CacheTables">
            <summary>
            映射缓存
            </summary>
        </member>
        <member name="M:Dapper.Common.TypeMapper.GetTableName``1">
            <summary>
            获取表名
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.TypeMapper.GetColumnName``1(System.String)">
            <summary>
            获取列名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.TypeMapper.GetDbColumn``1">
            <summary>
            获取列定义
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.TypeMapper.GetColumnNames``1">
            <summary>
            获取所有列名
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.TypeMapper.GetFieldName``1(System.String)">
            <summary>
            通过字段名获取属性名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.TypeMapper.GetFieldNames``1">
            <summary>
            获取所有属性名
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.TypeMapper.GetIdentityFieldName``1">
            <summary>
            获取标识列的属性名
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Dapper.Common.WhereExpression">
            <summary>
            表达式模型
            </summary>
        </member>
        <member name="T:Dapper.Common.WhereQuery`1">
            <summary>
            数据库表达式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.#ctor">
            <summary>
            创建动态表达式对象
            </summary>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            创建动态表达式对象
            </summary>
            <param name="expression"></param>
        </member>
        <member name="F:Dapper.Common.WhereQuery`1.Expressions">
            <summary>
            表达式列表
            </summary>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            And运算
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.And(System.String)">
            <summary>
            And
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.And(System.Boolean,System.String)">
            <summary>
            And
            </summary>
            <param name="condition"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.And(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件And运算
            </summary>
            <param name="condition"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            逻辑或
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.Or(System.String)">
            <summary>
            逻辑或
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.Or(System.Boolean,System.String)">
            <summary>
            逻辑或
            </summary>
            <param name="condition"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.Or(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            逻辑Or运算
            </summary>
            <param name="condition"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.Not(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            逻辑非
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.Not(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            逻辑非
            </summary>
            <param name="condition"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.Not(System.String)">
            <summary>
            逻辑非
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereQuery`1.Not(System.Boolean,System.String)">
            <summary>
            逻辑非
            </summary>
            <param name="condition"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:Dapper.Common.WhereQuery`1.Count">
            <summary>
            表达式个数
            </summary>
        </member>
        <member name="T:Dapper.Common.WhereType">
            <summary>
            运算符重载
            </summary>
        </member>
        <member name="M:Dapper.Common.WhereType.In(System.ValueType,System.Collections.IEnumerable)">
            <summary>
            In查询
            </summary>
            <param name="param"></param>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.NotIn(System.ValueType,System.Collections.IEnumerable)">
            <summary>
            Not In查询
            </summary>
            <param name="param"></param>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.In(System.String,System.Collections.IEnumerable)">
            <summary>
            In查询
            </summary>
            <param name="param"></param>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.NotIn(System.String,System.Collections.IEnumerable)">
            <summary>
            Not In查询
            </summary>
            <param name="param"></param>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.Like(System.String,System.String)">
            <summary>
            Like查询
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.NotLike(System.String,System.String)">
            <summary>
            Not Like查询
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.IsNull(System.Object)">
            <summary>
            Is Null查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.IsNotNull(System.Object)">
            <summary>
            Is Not Null查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.Between(System.ValueType,System.ValueType,System.ValueType)">
            <summary>
            Between查询
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.NotBetween(System.ValueType,System.ValueType,System.ValueType)">
            <summary>
            Not Between
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.Regexp(System.String,System.String)">
            <summary>
            正则匹配
            </summary>
            <param name="text"></param>
            <param name="regexp"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Common.WhereType.NotRegexp(System.String,System.String)">
            <summary>
            正则不匹配
            </summary>
            <param name="text"></param>
            <param name="regexp"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Common.WhereVisitor`1">
            <summary>
            数据库表达式构建
            </summary>
        </member>
        <member name="F:Dapper.Common.WhereVisitor`1.WhereExpression">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="F:Dapper.Common.WhereVisitor`1.Param">
            <summary>
            表达式参数
            </summary>
        </member>
        <member name="F:Dapper.Common.WhereVisitor`1.Fields">
            <summary>
            字段栈
            </summary>
        </member>
        <member name="P:Dapper.Common.WhereVisitor`1.Operator">
            <summary>
            当前运算符
            </summary>
        </member>
        <member name="M:Dapper.Common.WhereVisitor`1.SetValue(System.Object)">
            <summary>
            构建表达式参数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Dapper.Common.WhereVisitor`1.SetName(System.String,System.String)">
            <summary>
            构建表达式字段
            </summary>
            <param name="column"></param>
            <param name="field"></param>
        </member>
        <member name="M:Dapper.Common.WhereVisitor`1.Build(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{Dapper.Common.WhereExpression})">
            <summary>
            构建表达式
            </summary>
            <param name="param"></param>
            <param name="expressionList"></param>
            <returns></returns>
        </member>
    </members>
</doc>
