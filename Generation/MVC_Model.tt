<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Web" #>




<#@include file="$(SolutionDir)\Common.Model\Template\FileTemplate.ttinclude"#>
<#@include file="$(SolutionDir)\Common.Model\Template\DbTemplate.ttinclude"#>
<# 
	var connectionString="server=127.0.0.1;user id=root;password=123456;database=test;";
	var manager = Manager.Create(Host, GenerationEnvironment);
	var tables = DatabaseInfo.Build(connectionString);
#>

<#foreach(var table in tables){manager.StartNewFile(Utils.Pascal(table.TableName)+"Model.cs");#>
using System;
using Dapper.Common;

namespace Common.Model
{
    /// <summary>
    /// <#=table.TableComment#><#=table.TableType#>
	/// 更新时间：<#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
    /// </summary>
	public partial class <#=Utils.Pascal(table.TableName)#>Model : BaseModel<<#=Utils.Pascal(table.TableName)#>>
	{
<#foreach(var column in table.Columns){#>
        /// <summary>
        /// <#=column.ColumnComment#>
        /// Type:<#=column.ColumnType#> IsNull:<#=column.IsNullable#> Default:<#=column.ColumnDefault==null?"null":column.ColumnDefault#>
        /// </summary>
        public <#=Utils.GetTypeName(column.DataType)#> <#=Utils.Pascal(column.ColumnName)#> { get; set; }
<#}#>   
		/// <summary>
        /// 将Mvc请求参数转换成Entity对象
        /// </summary>
        /// <returns></returns>
		public <#=Utils.Pascal(table.TableName)#> NewInstance()
		{
			return new <#=Utils.Pascal(table.TableName)#>()
			{
<#foreach(var column in table.Columns){#>
				<#=Utils.Pascal(column.ColumnName)#> = this.<#=Utils.Pascal(column.ColumnName)#>,
<#}#> 
			};
		}
		public WhereQuery<<#=Utils.Pascal(table.TableName)#>> Query = new WhereQuery<<#=Utils.Pascal(table.TableName)#>>();
	}
}

<#}#>
<#manager.EndBlock();manager.Process(true);#>