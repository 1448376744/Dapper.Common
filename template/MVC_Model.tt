<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(SolutionDir)\Refrences\Dapper.dll" #>
<#@ assembly name="$(SolutionDir)\Refrences\MySql.Data.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="MySql.Data.MySqlClient" #>
<#@ import namespace="Dapper" #>
<#@ output extension=".cs" #>

<#
	//数据库连接字符串
	var connectionString = "server=127.0.0.1;user id=root;password=1024;database=test;";
#>

<#
	DefaultTypeMap.MatchNamesWithUnderscores = true;
	var connection = new MySqlConnection(connectionString);
	var tablesql = string.Format("SELECT TABLE_NAME,TABLE_TYPE,TABLE_COMMENT from INFORmation_schema.TABLES WHERE TABLE_SCHEMA='{0}'", connection.Database);
	var columnsql = string.Format("SELECT TABLE_NAME,COLUMN_NAME,COLUMN_COMMENT,COLUMN_DEFAULT,IS_NULLABLE,DATA_TYPE,COLUMN_TYPE,COLUMN_KEY FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='{0}'", connection.Database);
	var tables = connection.Query<TableInfo>(tablesql).ToList();
	var columns = connection.Query<ColumnInfo>(columnsql).ToList();	
#>
using System;
using Dapper.Linq;

namespace Standard.Model
{

<#foreach(var table in tables){#>
	/// <summary>
    /// <#=table.TableComment#>
	/// 更新时间：<#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
    /// </summary>
	public partial class <#=Utils.Pascal(table.TableName)#>Model
	{
		<#foreach(var column in columns.FindAll(f=>f.TableName==table.TableName)){#>
		
		/// <summary>
		/// <#=column.ColumnComment#>
		/// ColumnType：<#=column.ColumnType#> IsNull：<#=column.IsNullable#> Default：<#=column.ColumnDefault??"NULL"#>
		/// JsName:<#=Utils.Camel(column.ColumnName)#>
		/// </summary>
		public <#=Utils.GetCSharpType(column.DataType)#> <#=Utils.Pascal(column.ColumnName)#> { get; set; }
	<#}#>
		
		public <#=Utils.Pascal(table.TableName)#> NewInstance()
		{
			return new <#=Utils.Pascal(table.TableName)#>()
			{
    <#foreach(var column in columns.FindAll(f=>f.TableName==table.TableName)){#>
			<#=Utils.Pascal(column.ColumnName)#> = this.<#=Utils.Pascal(column.ColumnName)#>,
    <#}#>
		};
		}		
	}
<#}#>

}



<#+
 public class TableInfo
    {
        public string TableName { get; set; }
        public string TableType { get; set; }
        public string TableComment { get; set; }
    }
    public class ColumnInfo
    {
        public string TableName { get; set; }
        public string ColumnName { get; set; }
        public string ColumnComment { get; set; }
        public string ColumnDefault { get; set; }
        public string IsNullable { get; set; }
        public string ColumnType { get; set; }
        public string DataType { get; set; }
        public string ColumnKey { get; set; }
    }
    public static class Utils
    {
		//字段类型映射
        public static string GetCSharpType(string columnType)
        {
            var type = "object";
            switch (columnType)
            {
                case "varchar": type = "string"; break;
                case "text": type = "string"; break;
				case "char": type = "string"; break;
				case "tinyint": type = "int?"; break;
				case "smallint": type = "int?"; break;
                case "int": type = "int?"; break;
				case "integer": type = "int?"; break;
				case "bigint": type = "int?"; break;
				case "mediumint": type = "int?"; break;
				case "real": type = "float?"; break;
				case "float": type = "float?"; break;
				case "double": type = "double?"; break;
				case "decimal": type = "decimal?"; break;
				case "date": type = "DateTime?"; break;
				case "datetime": type = "DateTime?"; break;
            }
            return type;
        }
		//Pacsl命名转换
        public static string Pascal(string name)
        {
            var list = new List<string>();
            foreach (var item in name.Split('_'))
            {
                list.Add(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(item.ToLower()));
            }
            return string.Join("",list);
        }
		//Camel命名转换
		public static string Camel(string name)
		{
			name = Pascal(name);			
            return char.ToLower(name[0]) + name.Substring(1);
		}
    }
#>