<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(SolutionDir)\Refrences\Dapper.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="Dapper" #>
<#@ output extension=".cs" #>
<#
	//数据库连接字符串
	var connectionString = @"Data Source=DESKTOP-9IS2HA6\SQLEXPRESS;Initial Catalog=test;User ID=sa;Password=1024";
#>
<#
	DefaultTypeMap.MatchNamesWithUnderscores = true;
	var connection = new SqlConnection(connectionString);
	
	//视图
	var tablesql = "select object_id ,type_desc,name from sys.objects where type='U' or type='V'";
	//字段
	var columnsql = "select object_id,user_type_id,system_type_id,name,column_id,is_identity,max_length from sys.columns where object_id in @ObjectId";
	//索引
	var indexsql = "select a.object_id,a.column_id,b.name,b.is_primary_key from sys.index_columns as a join sys.indexes as b on a.object_id=b.object_id and a.index_id=b.index_id where a.object_id in @ObjectId";
	//说明
	var commentsql = "select major_id,minor_id,value from sys.extended_properties where name='MS_Description' and major_id in @ObjectId";
	//系统类型
	var typesql = "select name,system_type_id,user_type_id from sys.types";

	//查询
	var tables = connection.Query<Table>(tablesql).ToList();
	
	//参数
	var param = new 
	{
		ObjectId = tables.Select(s=>s.ObjectId)
	};
	
	var columns = connection.Query<Column>(columnsql, param).ToList();
	var indexs = connection.Query<Index>(indexsql, param).ToList();
	var comments = connection.Query<Comment>(commentsql, param).ToList();
	var types = connection.Query<DataType>(typesql).ToList();
#>
using System;
using Dapper.Linq;

namespace Standard.Model
{<#foreach(var table in tables){#>
	/// <summary>
    /// <#=comments.Find(f => f.MajorId == table.ObjectId && f.MinOrId == 0)?.Value ?? "" #>
	/// 更新时间：<#@ import namespace="System.Linq" #>
    /// </summary>
	[Table("<#=table.Name#>")]
	public partial class <#=Utils.Pascal(table.Name)#>
	{
		<#foreach(var column in columns.FindAll(f=>f.ObjectId == table.ObjectId)){#>		
		/// <summary>
		/// <#=comments.Find(f=>f.MajorId == column.ObjectId && f.MinOrId == column.ColumnId)?.Value ?? "" #>
		/// ColumnType：<#= string.Format("{0}({1})",types.Find(f=>f.UserTypeId == column.UserTypeId).Name,column.MaxLength) #>, IsNull：<#=column.IsNullable==1 ? "YES" :"NO" #>
		/// JsName:<#=Utils.Camel(column.Name)#>
		/// </summary>
		[Column("<#= column.Name #>", <#= indexs.Exists(e=> e.ObjectId == column.ObjectId && e.ColumnId == column.ColumnId && e.IsPrimaryKey == 1) ? "ColumnKey.Primary" : "ColumnKey.None" #>, <#= column.IsIdentity==1 ? "true" : "false" #>)]
		public <#=Utils.GetCSharpType(types.Find(f=>f.UserTypeId == column.UserTypeId).Name)#> <#=Utils.Pascal(column.Name)#> { get; set; }
		<#}#>
	
	}
<#}#>
}


<#+
 public class Table
    {
        public int? ObjectId { get; set; }
        public string TypeDesc { get; set; }
        public string Name { get; set; }
    }
    public class Column
    {
        public int? ObjectId { get; set; }
        public int? UserTypeId { get; set; }
        public int? SystemTypeId { get; set; }
        public string Name { get; set; }
        public int? ColumnId { get; set; }
        public int? IsIdentity { get; set; }
		public int? IsNullable { get; set; }
		public int? MaxLength { get; set; }		
    }
	public class Index
	{
		public int? ObjectId { get; set; }
		public int? ColumnId { get; set; }
		public string Name { get; set; }
		public int? IsPrimaryKey { get; set; }
	}
	public class Comment
	{
		public int? MajorId { get; set; }
		public int? MinOrId { get; set; }
		public string Value { get; set; }
	}
	public class DataType
	{
		public string Name { get; set; }
		public int? UserTypeId { get; set; }
		public int? SystemTypeId { get; set; }
	}
    public static class Utils
    {
		//字段类型映射
        public static string GetCSharpType(string columnType)
        {
            var type = "object";
            switch (columnType)
            {
                case "varchar": type = "string"; break;
                case "text": type = "string"; break;
				case "char": type = "string"; break;
				case "tinyint": type = "int?"; break;
				case "smallint": type = "int?"; break;
                case "int": type = "int?"; break;
				case "integer": type = "int?"; break;
				case "bigint": type = "int?"; break;
				case "mediumint": type = "int?"; break;
				case "real": type = "float?"; break;
				case "float": type = "float?"; break;
				case "double": type = "double?"; break;
				case "decimal": type = "decimal?"; break;
				case "date": type = "DateTime?"; break;
				case "datetime": type = "DateTime?"; break;
            }
            return type;
        }
		//Pacsl命名转换
        public static string Pascal(string name)
        {
            var list = new List<string>();
            foreach (var item in name.Split('_'))
            {
                list.Add(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(item.ToLower()));
            }
            return string.Join("",list);
        }
		//Camel命名转换
		public static string Camel(string name)
		{
			name = Pascal(name);			
            return char.ToLower(name[0]) + name.Substring(1);
		}
    }
#>